#!/usr/bin/env python3
"""
PriceDragon Scraper Test Suite
Comprehensive testing for all web scrapers and integration functionality
"""
import sys
import os
import time
from typing import Dict, List, Any, Tuple

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scraper.pchome_spider import PChomeSpider
from scraper.momo_spider import MomoSpider
from scraper.yahoo_spider import YahooSpider
from etl.pipeline import ProductETL
from database.db_utils import DatabaseManager

def test_yahoo_scraper() -> bool:
    """Test Yahoo scraper functionality"""
    print("üîç Testing Yahoo scraper...")
    spider = YahooSpider()
    
    try:
        products = spider.search_products("iPhone", max_pages=1)
        print(f"‚úÖ Found {len(products)} products on Yahoo")
        
        if products:
            sample = products[0]
            print(f"üì± Sample: {sample['name'][:50]}... - NT${sample['price']}")
            print(f"üîó URL: {sample['url'][:60]}...")
        
        return len(products) > 0
    except Exception as e:
        print(f"‚ùå Yahoo test failed: {e}")
        return False
    finally:
        spider.cleanup()

def test_pchome_scraper() -> bool:
    """Test PChome scraper functionality"""
    print("üîç Testing PChome scraper...")
    spider = PChomeSpider()
    
    try:
        products = spider.search_products("iPhone", max_pages=1)
        print(f"‚úÖ Found {len(products)} products on PChome")
        
        if products:
            sample = products[0]
            print(f"üì± Sample: {sample['name'][:50]}... - NT${sample['price']}")
        
        return len(products) > 0
    except Exception as e:
        print(f"‚ùå PChome test failed: {e}")
        return False
    finally:
        spider.cleanup()

def test_momo_scraper() -> bool:
    """Test Momo scraper functionality"""
    print("üîç Testing Momo scraper...")
    spider = MomoSpider()
    
    try:
        products = spider.search_products("iPhone", max_pages=1)
        print(f"‚úÖ Found {len(products)} products on Momo")
        
        if products:
            sample = products[0]
            print(f"üì± Sample: {sample['name'][:50]}... - NT${sample['price']}")
            print(f"üîó URL: {sample['url'][:60]}...")
        
        return len(products) > 0
    except Exception as e:
        print(f"‚ùå Momo test failed: {e}")
        return False
    finally:
        spider.cleanup()

def test_multi_platform_integration() -> bool:
    """Test complete multi-platform integration pipeline"""
    print("\nüß™ Testing Multi-Platform Integration...")
    
    pchome_spider = PChomeSpider()
    momo_spider = MomoSpider()
    
    try:
        print("üîç Collecting products from all platforms...")
        
        # Collect from PChome
        pchome_products = pchome_spider.search_products("iPhone", max_pages=1)
        print(f"üì¶ PChome: {len(pchome_products)} products")
        
        # Collect from Momo  
        momo_products = momo_spider.search_products("iPhone", max_pages=1)
        print(f"üì¶ Momo: {len(momo_products)} products")
        
        # Combine all products
        all_products = pchome_products + momo_products
        print(f"üìä Total products: {len(all_products)}")
        
        if all_products:
            # Test ETL pipeline
            print("üîÑ Running ETL pipeline...")
            pipeline = ProductETL()
            result = pipeline.process_scraper_results(all_products, "multi_platform_test")
            
            print(f"""
ETL Results:
  ‚úÖ Success: {result.get('products_processed', 0)}
  üìä Success Rate: {result.get('success_rate', 0.0):.1%}
  üÜî Session: {result.get('session_id', 'N/A')}
            """)
            
            # Test platform filtering
            print("üîç Testing platform filtering...")
            db = DatabaseManager()
            
            all_iphone = db.search_products("iPhone")
            pchome_iphone = db.search_products("iPhone", platform_filter="pchome")
            momo_iphone = db.search_products("iPhone", platform_filter="momo")
            
            print(f"üì± Total iPhone products: {len(all_iphone)}")
            print(f"üè™ PChome iPhone products: {len(pchome_iphone)}")
            print(f"üõí Momo iPhone products: {len(momo_iphone)}")
            
            # Success criteria - at least 1 platform should work
            platform_count = sum([
                len(pchome_iphone) > 0,
                len(momo_iphone) > 0,
            ])
            
            success = (
                result.get('success_rate', 0.0) > 0.5 and  # 50%+ success rate
                platform_count >= 1           # At least 1 platform working
            )
            
            return success
        else:
            print("‚ùå No products collected from any platform")
            return False
            
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        return False
    finally:
        pchome_spider.cleanup()
        momo_spider.cleanup()

def test_product_category_diversity() -> Tuple[bool, Dict[str, Any]]:
    """Test scrapers with diverse product categories"""
    print("üß™ Testing Product Category Diversity...")
    print("=" * 60)
    
    # Diverse product categories to test
    test_categories = {
        "Electronics": ["Á≠ÜÈõª", "ËÄ≥Ê©ü", "Áõ∏Ê©ü", "Âπ≥Êùø"],
        "Fashion": ["ÈÅãÂãïÈûã", "Áâõ‰ªîË§≤", "ÂåÖÂåÖ", "ÊâãÈå∂"],
        "Home": ["ÂíñÂï°Ê©ü", "Âê∏Â°µÂô®", "Â∫äÂ¢ä", "È§êÂÖ∑"],
        "Gaming": ["Switch", "PS5", "ÈÅäÊà≤ÊâãÊää", "ÈçµÁõ§"],
        "Beauty": ["Èù¢ËÜú", "Èò≤Êõ¨‰π≥", "Âè£Á¥Ö", "È¶ôÊ∞¥"],
        "Sports": ["ÁëúÁèàÂ¢ä", "ÂïûÈà¥", "Ë∑ëÈûã", "Á±ÉÁêÉ"],
    }
    
    platforms = {
        "PChome": PChomeSpider(),
        "Momo": MomoSpider(),
        "Yahoo": YahooSpider()
    }
    
    total_results = {}
    category_success = {}
    
    try:
        for category, products in test_categories.items():
            print(f"\nüéØ Testing Category: {category}")
            print("-" * 40)
            
            category_results = {}
            
            for product in products:
                print(f"\nüîç Searching for: {product}")
                product_results = {}
                
                for platform_name, spider in platforms.items():
                    try:
                        print(f"  üì° {platform_name}...", end=" ")
                        
                        # Search with max_pages=1 for speed
                        results = spider.search_products(product, max_pages=1)
                        count = len(results)
                        
                        product_results[platform_name] = {
                            'count': count,
                            'success': count > 0,
                            'samples': results[:2] if results else []  # First 2 samples
                        }
                        
                        status = "‚úÖ" if count > 0 else "‚ùå"
                        print(f"{status} {count} products")
                        
                    except Exception as e:
                        product_results[platform_name] = {
                            'count': 0,
                            'success': False,
                            'error': str(e),
                            'samples': []
                        }
                        print(f"‚ùå Error: {e}")
                    
                    # Add small delay between platforms
                    time.sleep(1)
                
                category_results[product] = product_results
            
            total_results[category] = category_results
            
            # Calculate category success rate
            category_success[category] = calculate_category_success(category_results, list(platforms.keys()))
            
            print(f"\nüìä {category} Summary:")
            for platform in platforms.keys():
                success_count = sum(1 for product_data in category_results.values() 
                                  if product_data[platform]['success'])
                total_count = len(products)
                success_rate = (success_count / total_count) * 100
                print(f"  {platform}: {success_count}/{total_count} ({success_rate:.1f}%)")
        
        # Final comprehensive analysis
        overall_success = print_diversity_analysis(total_results, category_success, list(platforms.keys()))
        
        return overall_success, total_results
        
    finally:
        for spider in platforms.values():
            spider.cleanup()

def calculate_category_success(category_results: Dict[str, Any], platforms: List[str]) -> Dict[str, Tuple[int, int, float]]:
    """Calculate success metrics for a category"""
    platform_success = {}
    
    for platform in platforms:
        successes = sum(1 for product_data in category_results.values() 
                       if product_data[platform]['success'])
        total = len(category_results)
        platform_success[platform] = (successes, total, successes/total if total > 0 else 0)
    
    return platform_success

def print_diversity_analysis(total_results: Dict[str, Any], category_success: Dict[str, Any], platforms: List[str]) -> bool:
    """Print detailed analysis of diversity test results"""
    print("\n" + "=" * 60)
    print("üèÜ DIVERSITY TEST ANALYSIS")
    print("=" * 60)
    
    # Overall platform performance
    print("\nüìä Platform Performance Across All Categories:")
    platform_totals = {platform: {'success': 0, 'total': 0} for platform in platforms}
    
    for category_data in category_success.values():
        for platform in platforms:
            success, total, rate = category_data[platform]
            platform_totals[platform]['success'] += success
            platform_totals[platform]['total'] += total
    
    for platform in platforms:
        success = platform_totals[platform]['success']
        total = platform_totals[platform]['total']
        rate = (success / total * 100) if total > 0 else 0
        print(f"  üè™ {platform}: {success}/{total} products ({rate:.1f}% success rate)")
    
    # Category difficulty analysis
    print("\nüéØ Category Difficulty Ranking:")
    category_avg_success = {}
    
    for category, platform_data in category_success.items():
        total_success = sum(data[0] for data in platform_data.values())
        total_attempts = sum(data[1] for data in platform_data.values()) 
        avg_rate = (total_success / total_attempts * 100) if total_attempts > 0 else 0
        category_avg_success[category] = avg_rate
    
    # Sort by success rate
    sorted_categories = sorted(category_avg_success.items(), key=lambda x: x[1], reverse=True)
    
    for i, (category, rate) in enumerate(sorted_categories, 1):
        difficulty = "üü¢ Easy" if rate > 80 else "üü° Medium" if rate > 60 else "üî¥ Hard"
        print(f"  {i}. {category}: {rate:.1f}% - {difficulty}")
    
    # Sample products showcase
    print("\nüõçÔ∏è Sample Products Found:")
    sample_count = 0
    
    for category, category_data in total_results.items():
        if sample_count >= 5:  # Limit samples
            break
            
        for product, platform_data in category_data.items():
            for platform, data in platform_data.items():
                if data.get('samples') and sample_count < 5:
                    sample = data['samples'][0]
                    print(f"  üì± {sample['name'][:50]}... - NT${sample['price']:.0f} ({platform})")
                    sample_count += 1
                    break
            if sample_count >= 5:
                break
    
    # Final verdict
    total_success = sum(platform_totals[p]['success'] for p in platforms)
    total_attempts = sum(platform_totals[p]['total'] for p in platforms)
    overall_rate = (total_success / total_attempts * 100) if total_attempts > 0 else 0
    
    print(f"\nüéâ DIVERSITY TEST VERDICT:")
    print(f"   üèÜ Overall Success Rate: {overall_rate:.1f}%")
    print(f"   üìä Total Products Found: {total_success}")
    print(f"   üéØ Categories Tested: {len(total_results)}")
    print(f"   üè™ Platforms Working: {len([p for p in platforms if platform_totals[p]['success'] > 0])}/3")
    
    success_threshold = overall_rate >= 60
    if overall_rate >= 75:
        print("   ‚úÖ EXCELLENT - Production ready for diverse categories!")
    elif overall_rate >= 60:
        print("   üëç GOOD - Strong multi-category performance!")
    elif overall_rate >= 40:
        print("   ‚ö†Ô∏è MODERATE - Some categories need attention")
    else:
        print("   üîß NEEDS WORK - Platform-specific issues detected")
    
    return success_threshold

def main():
    """Run comprehensive scraper test suite"""
    print("üß™ PriceDragon Comprehensive Scraper Test Suite")
    print("=" * 60)
    
    # Test individual platforms
    pchome_ok = test_pchome_scraper()
    print()
    momo_ok = test_momo_scraper()
    print()
    yahoo_ok = test_yahoo_scraper()
    print()
    
    # Test comprehensive features
    diversity_ok, diversity_results = test_product_category_diversity()
    print()
    integration_ok = test_multi_platform_integration()
    print()
    
    print("=" * 60)
    print("üìä COMPREHENSIVE TEST RESULTS:")
    print(f"  üè™ PChome Scraper: {'‚úÖ' if pchome_ok else '‚ùå'}")
    print(f"  üõí Momo Scraper: {'‚úÖ' if momo_ok else '‚ùå'}")
    print(f"  üõí Yahoo Scraper: {'‚úÖ' if yahoo_ok else '‚ùå'}")
    print(f"  üéØ Category Diversity: {'‚úÖ' if diversity_ok else '‚ùå'}")
    print(f"  üîÑ Multi-Platform Integration: {'‚úÖ' if integration_ok else '‚ùå'}")
    
    # Calculate final score
    platform_success = [pchome_ok, momo_ok, yahoo_ok]
    success_count = sum(platform_success)
    
    print(f"\nüèÜ Final Score: {success_count}/3 platforms working")
    
    if success_count == 3 and diversity_ok and integration_ok:
        print("üéâ PERFECT! All systems fully operational!")
    elif success_count >= 2 and (diversity_ok or integration_ok):
        print("‚úÖ EXCELLENT! Multi-platform system ready for production!")
    elif success_count >= 1:
        print("üëç GOOD! Basic functionality working, some improvements needed")
    else:
        print("‚ö†Ô∏è NEEDS WORK! Critical issues require attention")
    
    return success_count >= 2

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)